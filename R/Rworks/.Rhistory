gender <- factor(gender)
source("~/.active-rstudio-document", echo=TRUE)
gender <- factor(gender)
gender
levels(gender)
Info.f
#데이터 프레임
Info.f <- data.frame(height, weight, age, gender)
Info.f
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 벡터에 원소 값 추가
absent[6] <- 2
absent[c(2, 4)]
absent[c(1, 3, 5)]
absent[1:3]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
levels(bt.n)
str(bt.n)
class(bt.n)
source("~/.active-rstudio-document", echo=TRUE)
clear
# 리스트 list
h.list <- c('balling', 'tennis', 'ski') # 취미의 종류
# 리스트 list
h.list <- c('balling', 'tennis', 'ski') # 취미의 종류
# 리스트 list
h.list <- c('balling', 'tennis', 'ski') # 취미의 종류
person <- list(name = "고영보", age = 20, student = T, hpnny = h.list)
person
person <- list(name = "고영보", age = 20, student = T, hobby = h.list)
person
person$name
person$student
person[3]
person$student
source("~/.active-rstudio-document", echo=TRUE)
accident.year
source("~/.active-rstudio-document", echo=TRUE)
# 3. 가장 사고가 많은 달과 가장 적은 달의 건수를 알아봅니다.
# 사고 건수 오름차순 정렬
# 사고 건수가 가장 많은 달: 70 M7  7월달
# 사고 건수가 가장 적은 달: 22 M12 12월달
accident.sort = sort(accident)
accident.sort
cat("사고 건수가 가장 적은 달: ", min(accident))
cat("사고 건수가 가장 적은 달: ", min(accident).names())
cat("사고 건수가 가장 많은 달: ", max(accident), max(accident).name())
cat("사고 건수가 가장 적은 달: ", min(accident))
# 3. 가장 사고가 많은 달과 가장 적은 달의 건수를 알아봅니다.
# 사고 건수 오름차순 정렬
# 사고 건수가 가장 많은 달: 70 M7  7월달
# 사고 건수가 가장 적은 달: 22 M12 12월달
cat("사고 건수가 가장 많은 달: ", max(accident))
# 5. 사고 건수가 50건을 넘는 달의 통계만 출략해봅니다.
accident[accident>=50]
# 6. 사고 건수가 50건을 넘는 달의 이름을 출력해봅니다.
accident[accident<=50]
# 7. 사고 건수가 50 미만인 달은 1년 중 몇 개월인지 구해봅니다.
length(accident[accident<50])
# 6. 사고 건수가 50건을 넘는 달의 이름을 출력해봅니다.
accident[$accident>=50]
# 6. 사고 건수가 50건을 넘는 달의 이름을 출력해봅니다.
accident[levels(accident>=50)]
# 6. 사고 건수가 50건을 넘는 달의 이름을 출력해봅니다.
accident[str(accident>=50)]
# 7. 사고 건수가 50 미만인 달은 1년 중 몇 개월인지 구해봅니다.
# length()
length(accident[accident<50])
# 6. 사고 건수가 50건을 넘는 달의 이름을 출력해봅니다.
accident[accident>=50]
# 8. 6월보다 사고가 많은 달과 사고 건수를 구해봅니다.
cat("사고 건수가 가장 많은 달: ", accident[accident>=accident[6]])
# 8. 6월보다 사고가 많은 달과 사고 건수를 구해봅니다.
cat("사고 건수가 가장 많은 달: ", accident[accident>accident[6]])
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 교재에 있는 매트릭스 만들기
matrix(1:20, nrow = 4, ncol = 5)
matrix(1:20, nrow = 4, ncol = 5, byrow = T)
source("~/.active-rstudio-document", echo=TRUE)
m1
matrix(1:20, nrow = 4, ncol = 5, bycol = T) # 행 우선 행렬
row
clear
source("~/.active-rstudio-document", echo=TRUE)
# 예제1
# 햄버거 영양 성분 정보 제공하기
m1 <- matrix(c(514, 533, 566, 917, 853, 888, 11, 13, 10), nrow = 3, ncol = 3)
rownames(m1) <- c('M', 'L', 'B')
colnames(m1) <- c('열량', '나트륨', '포화지방')
m1
# 예제1
# 햄버거 영양 성분 정보 제공하기
burger <- matrix(c(514, 917, 11,
533, 853, 13,
566, 888, 19), nrow = 3, ncol = 3, byrow = T)
rownames(m1) <- c('M', 'L', 'B')
colnames(m1) <- c('열량', '나트륨', '포화지방')
burger
rownames(burger) <- c('M', 'L', 'B')
colnames(burger) <- c('열량', '나트륨', '포화지방')
burger
burger['M', '나트륨']
burger['M',]
burger[,'열량']
burger[1, 2]
burger[1,]
# 데이터프레임 만들기
df <- data.frame(height, weight, age)
df
gender
gender <- c('F', 'F', 'M', 'M', 'F', 'M')
gender
# 데이터프레임 만들기
df <- data.frame(height, weight, age, gender)
df
# 예제 2
# 햄버거 영양 성분 정보 추가하기
burger2 <- matrix(c(514, 917, 11,
533, 853, 13,
566, 888, 19), nrow = 3, ncol = 3, byrow = T)
rownames(burger2) <- c('M', 'L', 'B')
colnames(burger2) <- c('열량', '나트륨', '포화지방')
burger2
data.frame(burger2, menu)
data.frame(burger2, menu)
# 예제 2
# 햄버거 영양 성분 정보 추가하기
burger2 <- c(514, 917, 11, 533, 853, 13, 566, 888, 19)
menu <- c('새우', '불고기', '치킨')
data.frame(burger2, menu)
# 예제 2
# 햄버거 영양 성분 정보 추가하기
burger2 <- c(514, 917, 11,
533, 853, 13,
566, 888, 19)
menu <- c('새우', '불고기', '치킨')
data.frame(burger2, menu)
# 예제 2
# 햄버거 영양 성분 정보 추가하기
kcal <- c(514, 533, 566)
na <- c(917, 853, 888)
fat <- c(11, 13, 10)
menu <- c('새우', '불고기', '치킨')
data.frame(kcal, na, fat, menu)
# 예제 2
# 햄버거 영양 성분 정보 추가하기
brend <- c('M', 'L', 'B')
kcal <- c(514, 533, 566)
na <- c(917, 853, 888)
fat <- c(11, 13, 10)
menu <- c('새우', '불고기', '치킨')
data.frame(kcal, na, fat, menu)
data.frame(brend, kcal, na, fat, menu)
# 예제 2
# 햄버거 영양 성분 정보 추가하기
brand <- c('M', 'L', 'B')
kcal <- c(514, 533, 566)
na <- c(917, 853, 888)
fat <- c(11, 13, 10)
menu <- c('새우', '불고기', '치킨')
data.frame(brand, kcal, na, fat, menu)
dara.frame(burger, menu)
burger <- dara.frame(burger, menu)
burger <- data.frame(burger, menu)
menu <- c('새우', '불고기', '치킨')
burger <- data.frame(burger, menu)
burger
# 매트릭스와 데이터프레임 다루기
str(burger)
source("~/.active-rstudio-document", echo=TRUE)
nrow(burger)
ncol(burger)
# 데이터셋의 기본정 확인 함수들
dim(burger)
# 데이터셋의 변수 내용 확인
burger$kcal
burger$na
burger$menu
# 데이터셋의 변수 내용 확인
burger$열량
burger$나트륨
colnames(burger)
ls(burger)
head(burger)
data()
view(iris)
iris
view(iris)
str(iris)
levels(iris[,5])
levels(iris$Species)
levels(iris[,"Species"])
levels(iris[,5])
levels(iris$Species)
levels(iris[,"Species"])
head(iris)
table(iris[,5])
head(iris)
iris[1:5,]
tail(iris)
iris(145:150)
# 데이터프레임에 함수 적용
culSums(iris[,-5])
source("~/.active-rstudio-document", echo=TRUE)
view(iris)
#view(iris)
str(iris)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("reshape2")
library(reshape2)
tips
source("~/.active-rstudio-document", echo=TRUE)
library(reshape2)
tips
tips
class(tips)
is.matrix(tips)
is.data.frame(tips)
head(tips)
tips[1:5,]
#4 tips에서 day변수의 빈도
table(tips$day)
table(tips["day"])
#3
head(tips)
tips[1:6,]
str(tips)
#7
colMeans(tips[c('total_bill', 'tip', 'size')])
mean(tip.rate)
#8
tip.rate <- tips$tip/tips$total_bill # 손님별 팁의 비율
mean(tip.rate)
str(tips)
# 2. tips의 자료구조가 매트릭스인지 확인합니다.
class(tips)         # tips의 클래스 확인
is.matrix(tips)     # tips가 매트릭스인지 확인 (= "data.frame")
is.data.frame(tips) # tips가 데이터프레임인지 확인 (= TRUE: 데이터프레임이 맞음)
str(tips)
# 3. 처음 개의 관측값을 출력합니다.
head(tips)
# 4. str() 함수를 사용하여 데이터 구조를 알아봅니다.
str(tips)
# 3. 처음 개의 관측값을 출력합니다.
head(tips)
tips[1:6,]
# 6. 요일별로 시간대(time)가 'Dinner인 경우와 'Lunch인 경우로 나누어
#    팁에 빈도가 있는지 알아봅니다.
table(dinner$day)
source("C:/Users/USER/Desktop/2학년/2학년 2학기 자료/과학적데이터처리2/과제/종업원의 팁 계산하기.R", echo=TRUE)
source("C:/Users/USER/Desktop/2학년/2학년 2학기 자료/과학적데이터처리2/과제/종업원의 팁 계산하기.R", echo=TRUE)
source("C:/Users/USER/Desktop/2학년/2학년 2학기 자료/과학적데이터처리2/과제/종업원의 팁 계산하기.R", echo=TRUE)
# 5. tips 데이터셋에서 요일(days)별 팁을 받는 빈도를 구합니다.
table(tips$day)    # "day" 이름을 가진 tips의 테이블을 출력
table(tips["day"]) # 위와 동일함
# 6. 요일별로 시간대(time)가 'Dinner인 경우와 'Lunch인 경우로 나누어
#    팁에 빈도가 있는지 알아봅니다.
dinner <- subset(tips, time == 'Dinner')
# 6. 요일별로 시간대(time)가 'Dinner인 경우와 'Lunch인 경우로 나누어
#    팁에 빈도가 있는지 알아봅니다.
dinner <- subset(tips, time == 'Dinner')
lunch <- subset(tips, time == 'Lunch')
table(dinner$day)
table(lunch$day)
# 3. 처음 개의 관측값을 출력합니다.
head(tips)
getwd() # 현재 작업 위치 (=폴더, 디렉토리)
setwd("C:/Users/USER/Documents/Rworks")
# install.packages("svDialogs")
library(svDialogs)
height <- dlgInput("Input Height, cm")$res
height <- dlgInput("Input Height, cm")$res
source("C:/Users/USER/Desktop/2학년/2학년 2학기 자료/과학적데이터처리2/코드/1013.R", echo=TRUE)
# 2. 파일로 결과 보기 (출력, 보내기, 쓰기)
sink("output.txt")
sink()                                     # 파일에 내용 저장 (업데이트)
source("C:/Users/USER/Desktop/2학년/2학년 2학기 자료/과학적데이터처리2/코드/1013.R", echo=TRUE)
height <- dlgInput("Input Height, cm")$res
weight <- dlgInput("Input Weight, kg")$res
height <- as.numeric(height)               # 문자를 숫자로 자료형 변환
weight <- as.numeric(weight)               # 문자를 숫자로 자료형 변환
height <- height/100
bmi <- weight/(height^2)
cat("입력한 키는 ", height*100, "cm, 몸무게는 ", weight, "kg 입니다.\n")
cat("BMI는 ", bmi, "입니다.")
sink()                                     # 파일에 내용 저장 (업데이트)
sink()                                     # 파일에 내용 저장 (업데이트)
cat("BMI는 ", bmi, "입니다.")
sink()                                     # 파일에 내용 저장 (업데이트)
sink
sink
# 2. 파일로 결과 보기 (출력, 보내기, 쓰기)
sink("output.txt")                         # 작업 공간에 output.txt 파일 생성
height <- dlgInput("Input Height, cm")$res
weight <- dlgInput("Input Weight, kg")$res
height <- as.numeric(height)               # 문자를 숫자로 자료형 변환
weight <- as.numeric(weight)               # 문자를 숫자로 자료형 변환
height <- height/100
bmi <- weight/(height^2)
cat("입력한 키는 ", height*100, "cm, 몸무게는 ", weight, "kg 입니다.\n")
cat("BMI는 ", bmi, "입니다.")
sink()                                     # 파일에 내용 저장 (업데이트)
# .csv 파일 읽기(불러오기, 가져오기)
aircsv <- read.csv('airquality.csv', header = T)
aircsv
# .txt 파일 읽기(불러오기, 가져오기)
airtxt <- read.table('airquality.txt', header = T)
airtxt
# .xlsx 파일 읽기(불러오기, 가져오기)
install.packages('readxl') # .xlsx(엑셀) 파일을 불러오기 위한 패키지 설치
library(readxl)
airxlsx <- read_excel('airquality.xlsx')
airxlsx
View(airxlsx)
str(airxlsx)               # 데이터 구조, 셋 종류
# .xlsx 파일에 쓰기
install.packages("openxlsx")
# .csv 파일에 쓰기
wirte.csv(CO2, "co2.csv", row.names = F)                # 행의 이름을 쓰지 않는다
# CO2 데이터 확인
data()
str(CO2)
CO2
# .csv 파일에 쓰기
wirte.csv(CO2, "co2.csv", row.names = F)                # 행의 이름을 쓰지 않는다
# .csv 파일에 쓰기
write.csv(CO2, "co2.csv", row.names = F)                # 행의 이름을 쓰지 않는다
# .txt 파일에 쓰기
write.table(CO2, "co2.txt", row.names = F, quote = F)   # 쿼터를 모두 제거
library(openxlsx)
write.xlsx(CO2, file = "co2.xlsx")
carprice.new <- read.csv('carprice.csv', header = T)
carprice.new
View(carprice.new)
str(carprice.new)
# (1) 각 조건 값을 화면에서 입력받아 변수에 저장합니다.
input.type <- dlgInput("Input type")$res
input.mpg <- dlgInput("Input MPG.city")$res
# (2) input.city는 대소 비교를 위해 숫자형으로 변환합니다.
input.city <- as.numeric(input.city)
carprice.new <- read.csv('carprice.csv', header = T)
carprice.new
View(carprice.new)
# (1) 각 조건 값을 화면에서 입력받아 변수에 저장합니다.
input.type <- dlgInput("Input type")$res
input.city <- dlgInput("Input MPG.city")$res
# (2) input.city는 대소 비교를 위해 숫자형으로 변환합니다.
input.city <- as.numeric(input.city)
# (3) 2가지 조건을 만족하는 데이터를  추출해 변수 result에 저장합니다.
result <- subset(carprice.new, Type == input.type & MPG.city >= input.city)
# (4) 결과를 화면과 search.txt 파일로 동시에 출력합니다.
print(result)
sink('search.txt', append = T)
print(result)
sink()
# (6) result에 저장된 데이터를 엑셀 파일 (.xlsx)로 저장합니다.
write.xlsx(result, 'search.txt', row.names = F)
# (6) result에 저장된 데이터를 엑셀 파일 (.xlsx)로 저장합니다.
write.xlsx(result, 'search.xlsx', row.names = F)
# (6) result에 저장된 데이터를 엑셀 파일 (.xlsx)로 저장합니다.
write.xlsx(result. 'search.xlsx', row.names = F)
